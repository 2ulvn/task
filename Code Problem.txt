#include <iostream>
using namespace std;

class Graph{
private:
    int totalNodes;
    int graphMatrix[10][10];

public:
    Graph(int nodes){
        totalNodes = nodes;
        for(int i = 0; i < 10; i++){
            for(int j = 0; j < 10; j++){
                graphMatrix[i][j] = 0;
            }
        }
    }

    void addConnection(int start, int end){
        graphMatrix[start][end] = 1;
        graphMatrix[end][start] = 1;
    }

    void showGraph(){
        cout << "Adjacency Matrix:\n";
        for(int i = 0; i < totalNodes; i++){
            for(int j = 0; j < totalNodes; j++){
                cout << graphMatrix[i][j] << " ";
            }
            cout << endl;
        }
    }

    bool checkConnected(){
        bool visitedNodes[10] = {false};
        int queue[10];
        int front = 0, rear = 0;
        queue[rear++] = 0;
        visitedNodes[0] = true;
        int visitedCount = 0;
        while(front < rear){
            int currentNode = queue[front++];
            visitedCount++;
            for(int i = 0; i < totalNodes; i++){
                if(graphMatrix[currentNode][i] == 1 && !visitedNodes[i]){
                    visitedNodes[i] = true;
                    queue[rear++] = i;
                }
            }
        }

        return visitedCount == totalNodes;
    }
};

int main(){
    int nodes = 5;
    Graph myGraph(nodes);
    myGraph.addConnection(0, 1);
    myGraph.addConnection(0, 2);
    myGraph.addConnection(1, 3);
    myGraph.addConnection(3, 4);
    myGraph.showGraph();
    if(myGraph.checkConnected()){
        cout << "Graph is connected" <<endl;
    } else{
        cout << "Graph is not connected" <<endl;
    }

    return 0;
}